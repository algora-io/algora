import Config

config :algora, :github,
  client_id: System.get_env("GITHUB_CLIENT_ID"),
  client_secret: System.get_env("GITHUB_CLIENT_SECRET"),
  app_handle: System.get_env("GITHUB_APP_HANDLE"),
  app_id: System.get_env("GITHUB_APP_ID"),
  webhook_secret: System.get_env("GITHUB_WEBHOOK_SECRET"),
  private_key: System.get_env("GITHUB_PRIVATE_KEY"),
  pat: System.get_env("GITHUB_PAT"),
  pat_enabled: System.get_env("GITHUB_PAT_ENABLED", "false") == "true"

config :stripity_stripe,
  api_key: System.get_env("STRIPE_SECRET_KEY"),
  api_version: "2022-11-15"

config :algora, :stripe,
  secret_key: System.get_env("STRIPE_SECRET_KEY"),
  publishable_key: System.get_env("STRIPE_PUBLISHABLE_KEY"),
  webhook_secret: System.get_env("STRIPE_WEBHOOK_SECRET"),
  test_customer_id: System.get_env("STRIPE_TEST_CUSTOMER_ID"),
  test_account_id: System.get_env("STRIPE_TEST_ACCOUNT_ID")

# Configure your database
config :algora, Algora.Repo,
  url: System.get_env("DATABASE_URL"),
  stacktrace: true,
  show_sensitive_data_on_connection_error: true,
  pool_size: 10,
  migration_primary_key: [type: :string],
  migration_timestamps: [type: :utc_datetime_usec]

# For development, we disable any cache and enable
# debugging and code reloading.
#
# The watchers configuration can be used to run external
# watchers to your application. For example, we can use it
# to bundle .js and .css sources.
config :algora, AlgoraWeb.Endpoint,
  # Binding to loopback ipv4 address prevents access from other machines.
  # Change to `ip: {0, 0, 0, 0}` to allow access from other machines.
  http: [ip: {127, 0, 0, 1}, port: String.to_integer(System.get_env("PORT") || "4000")],
  check_origin: false,
  code_reloader: true,
  debug_errors: true,
  secret_key_base: "WYiQUy5kdwRSeANJjW+5ddL155PmOJ64xCQePobCN45nqhDMdGfc3NnpTy/0TtYF",
  watchers: [
    node: ["build.js", "--watch", cd: Path.expand("../assets", __DIR__)],
    # esbuild: {Esbuild, :install_and_run, [:algora, ~w(--sourcemap=inline --watch)]},
    tailwind: {Tailwind, :install_and_run, [:algora, ~w(--watch)]}
  ]

# ## SSL Support
#
# In order to use HTTPS in development, a self-signed
# certificate can be generated by running the following
# Mix task:
#
#     mix phx.gen.cert
#
# Run `mix help phx.gen.cert` for more information.
#
# The `http:` config above can be replaced with:
#
#     https: [
#       port: 4001,
#       cipher_suite: :strong,
#       keyfile: "priv/cert/selfsigned_key.pem",
#       certfile: "priv/cert/selfsigned.pem"
#     ],
#
# If desired, both `http:` and `https:` keys can be
# configured to run both http and https servers on
# different ports.

# Watch static and templates for browser reloading.
config :algora, AlgoraWeb.Endpoint,
  live_reload: [
    patterns: [
      ~r"priv/static/(?!uploads/).*(js|css|png|jpeg|jpg|gif|svg)$",
      ~r"priv/gettext/.*(po)$",
      ~r"lib/algora_web/(controllers|live|components)/.*(ex|heex)$"
    ]
  ]

# Enable dev routes for dashboard and mailbox
config :algora, dev_routes: true

# Do not include metadata nor timestamps in development logs
config :logger, :console,
  format: "[$level] $message\n",
  level: String.to_atom(System.get_env("LOG_LEVEL") || "debug")

# Set a higher stacktrace during development. Avoid configuring such
# in production as building large stacktraces may be expensive.
config :phoenix, :stacktrace_depth, 20

# Initialize plugs at runtime for faster development compilation
config :phoenix, :plug_init_mode, :runtime

# Include HEEx debug annotations as HTML comments in rendered markup
config :phoenix_live_view, :debug_heex_annotations, true

# Disable swoosh api client as it is only required for production adapters.
config :swoosh, :api_client, false

# Path to install SaladUI components
config :salad_ui, components_path: Path.join(File.cwd!(), "lib/algora_web/components/ui")

config :algora,
  cloudflare_tunnel: System.get_env("CLOUDFLARE_TUNNEL"),
  swift_mode: System.get_env("SWIFT_MODE") == "true",
  auto_start_pollers: System.get_env("AUTO_START_POLLERS") == "true"
